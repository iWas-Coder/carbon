#+AUTHOR: Wasym A. Alonso

# Logo & Title
#+begin_html
<h1 align="center">
<img src="assets/logo.png" alt="Carbon Logo">
<br/>
Carbon
</h1>
#+end_html

# Subtitle
#+begin_html
<h4 align="center">
You can't unit test C, right?
</h4>
#+end_html

# Buy Me A Coffee
#+begin_html
<p align="center">
<a href="https://www.buymeacoffee.com/iwas.coder">
<img src="https://cdn.buymeacoffee.com/buttons/default-yellow.png" alt="Buy Me A Coffee" height=41 width=174>
</a>
</p>
#+end_html

# Repository info badges
#+begin_html
<p align="center">
<img src="https://img.shields.io/github/license/iwas-coder/carbon?color=blue" alt="License">
<img src="https://img.shields.io/github/repo-size/iwas-coder/carbon?color=blue" alt="Size">
<img src="https://img.shields.io/github/v/tag/iwas-coder/carbon?color=blue" alt="Release">
</p>
#+end_html

(...)

# GNU GPLv3+ License notice
#+begin_quote
This work and all its documentation is licensed under the Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) License. @@html:<br>@@
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. @@html:<br>@@
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#+end_quote

* Table of Contents :toc:
- [[#usage][Usage]]
  - [[#target-code][Target code]]
  - [[#test-code][Test code]]
  - [[#test-suite-entrypoint][Test suite entrypoint]]
- [[#code-coverage][Code coverage]]

* Usage

(...)

#+begin_src sh
$  git submodule add https://github.com/iWas-Coder/carbon vendor/carbon
#+end_src

(...)

#+begin_src sh
CFLAGS="-Wall -Wextra -pedantic -Werror -fanalyzer"
#+end_src
- ~-Wall~ :: This enables all the warnings about constructions that some users consider questionable, and that are easy to avoid (or modify to prevent the warning), even in conjunction with macros.
- ~-Wextra~ :: This  enables some extra warning flags that are not enabled by ~-Wall~.
- ~-pedantic~ :: Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++.
- ~-Werror~ :: Make all warnings into errors.
- ~-fanalyzer~ :: This option enables an static analysis of program flow which  looks for "interesting" interprocedural paths through the code, and issues warnings for problems found on them.

(...)

** Target code

(...)

#+begin_src c
// include/x.h

#pragma once

void inc_int(int *x);
#+end_src

#+begin_src c
// src/x.c

#include <x.h>

void inc_int(int *x) {
  ++(*x);
}
#+end_src

(...)

#+begin_src sh
$  gcc -I include $CFLAGS --coverage -c src/x.c -o build/x.o
#+end_src

** Test code

(...)

#+begin_src c
// test/include/x_test.h

#pragma once

void x_test_register(void);
#+end_src

#+begin_src c
// test/src/x_test.c

#include <x.h>
#include <x_test.h>
#include <carbon.h>

static bool_t x_test_inc_int(void) {
  int a = 1, b = 0;
  carbon_should_not_be(a, b);
  inc_int(&b);
  carbon_should_be(a, b);
  return true;
}

void x_test_register(void) {
  CARBON_REGISTER_TEST(x_test_inc_int);
}
#+end_src

(...)

#+begin_src sh
$  gcc -I include -I test/include -I vendor/carbon/include $CFLAGS -c test/src/x_test.c -o build/test/x_test.o
#+end_src

** Test suite entrypoint

(...)

#+begin_src c
// test/src/test.c

#define CARBON_IMPLEMENTATION
#include <carbon.h>
#include <x_test.h>

int main(void) {
  x_test_register();

  return carbon_test_manager_run();
}
#+end_src

(...)

#+begin_src sh
$  gcc -I test/include -I vendor/carbon/include $CFLAGS -c test/src/test.c -o build/test/test.o
#+end_src

(...)

#+begin_src sh
$  gcc --coverage build/x.o build/test/x_test.o build/test/test.o -Wl,--build-id -o build/test/test
#+end_src

* Code coverage

(...)

#+begin_src sh
$  gcov -n -abdkq build/*.o
#+end_src

(...)
